#include<iostream>
#include<stdio.h>
#include<vector>
#include<stack>
#include<queue>
#include<list>
#include<string>
#include<algorithm>
#include<cassert>
#include<memory.h>
#include<cmath>
#include<map>
using namespace std;
typedef int KeyType;
struct Node {
	KeyType key;
	int size, priority;
	Node* left, * right;
	Node(const KeyType& _key) :key(_key), size(1), priority(rand()), left(NULL), right(NULL) {}
	void calcSize() {
		size = 1;
		if (left != NULL) size += left->size;
		if (right != NULL) size += right->size;
	}
	void setLeft(Node* newLeft) { left = newLeft; calcSize(); }
	void setRight(Node* newRight) { right = newRight; calcSize(); }
};
//root를 루트로하는 트리를
//key미만의 값을가진 트리와 key이상의 값을가진 트리 두개로 쪼개어 반환한다.
typedef pair<Node*, Node*> NodePair;
NodePair split(Node* root, KeyType key) {
	if (root == NULL) return NodePair(NULL, NULL);
	//key > root->key 이면,
	//key미만의 값을가진 트리와 key이상의 값을가진 트리 두개로 오른쪽 서브트리를 쪼갠다.
	if (key > root->key) {
		NodePair rs = split(root->right, key);
		//key미만의 값을가진 트리를 root의 왼쪽 서브트리로 설정한다.
		root->setRight(rs.first);
		return NodePair(root, rs.second);
	}
	else {
		NodePair ls = split(root->left, key);
		root->setLeft(ls.second);
		return NodePair(ls.first, root);
	}
}
//root를 루트로 하는 트리에 node를 삽입하고,
//그 트리의 루트를 반환한다.
Node* insert(Node* root, Node* node) {
	if (root == NULL) return node;
	//node의 우선순위가 클경우, root를 대체한다.
	if (root->priority < node->priority) {
		NodePair splitted = split(root, node->key);
		node->setLeft(splitted.first);
		node->setRight(splitted.second);
		return node;
	}
	else if (root->key > node->key)
		root->setLeft(insert(root->left, node));
	else
		root->setRight(insert(root->right, node));
	return root;
}
//a트립와 b트립를 합치고 루트를 반환한다.max(a)<min(b)
Node* merge(Node* a, Node* b) {
	if (a == NULL) return b;
	if (b == NULL) return a;
	//b의 우선순위가 더 클경우, a는 b의 자식이어야한다.
	if (a->priority < b->priority) {
		b->setLeft(merge(a, b->left));
		return b;
	}
	else {
		a->setRight(merge(a->right, b));
		return a;
	}
}
//key를 지운 트리의 루트를 반환한다.
Node* erase(Node* root, KeyType key) {
	//기저: key를 찾은경우와 key가 없는경우
	if (root == NULL) return root;
	if (root->key == key) {
		Node* merged = merge(root->left, root->right);
		delete root;
		return merged;
	}
	if (root->key > key)
		root->setLeft(erase(root->left, key));
	else
		root->setRight(erase(root->right, key));
	return root;
}
//root를 루트로 하는 트리 중에서 k번째 원소를 반환한다.
Node* kth(Node* root, int k) {
	//왼쪽 서브트리의 크기를 구한다.
	int leftSize = 0;
	if (root->left != NULL) leftSize = root->left->size;
	//k번째 노드는 왼쪽 서브트리에 속해 있다.
	if (k <= leftSize) return kth(root->left, k);
	//루트가 k번째 노드이다.
	if (k == leftSize + 1) return root;
	//k번째 노드는 오른쪽 서브트리에서 k-leftSize-1번째 노드이다.
	return kth(root->right, k - leftSize - 1);
}
//shifted[i]: a[i]가 왼쪽으로 몇칸 움직이는가?
//k칸 움직였다면, a[i]보다 큰 수가 k개 있다는 말이다.
int n, shifted[50000];
int a[50000];
void solve() {
	//1~N까지의 숫자를 모두 저장하는 트립을 만든다.
	Node* candidates = NULL;
	for (int i = 0; i < n; ++i)
		candidates = insert(candidates, new Node(i + 1));
	for (int i = n - 1; i >= 0; --i) {
		//후보 중 이 수보다 큰 수가 larger개 있다.
		int larger = shifted[i];
		//i+1: 지금 트리의 크기
		Node* k = kth(candidates, i + 1 - larger);
		a[i] = k->key;
		candidates = erase(candidates, k->key);
	}
}
int main(void) {
	cin >> n;
	for (int i = 0; i < n; ++i)
		cin >> shifted[i];
	solve();
	for (int i = 0; i < n; ++i)
		cout << a[i] << endl;
}