#include<iostream>
#include<stdio.h>
#include<vector>
#include<stack>
#include<queue>
#include<list>
#include<string>
#include<algorithm>
#include<cassert>
#include<memory.h>
#include<cmath>
using namespace std;
struct TreeNode {
	vector<TreeNode*> children;
};
int n, y[100], x[100], radius[100];
int sqr(int x) { return x * x; }
//a,b 사이의 거리제곱을 반환한다.
int sqrdist(int a, int b) {
	return sqr(y[a] - y[b]) + sqr(x[a] - x[b]);
}
//성벽 a가 성벽 b를 포함하는지 확인한다.
bool encloses(int a, int b) {
	return radius[a] > radius[b] &&
		sqrdist(a, b) < sqr(radius[a] - radius[b]);
}
//성벽 트리에서 parent가 child의 부모인지 확인한다.
//무조건 직접포함해야한다.
bool isChild(int parent, int child) {
	if (!encloses(parent, child)) return false;
	for (int i = 0; i < n; ++i)
		if (i != parent && i != child &&
			encloses(parent, i) && encloses(i, child))
			return false;
	return true;
}
//root 성벽을 루트로 하는 트리를 생성한다.
//TreeNode형 주소를 리턴하는 함수이다.
TreeNode* getTree(int root) {
	//ret은 짭root노드
	TreeNode* ret = new TreeNode();
	for (int ch = 0; ch < n; ++ch)
		//root성벽이 ch를 직접 포함한다면
		if (isChild(root, ch))
			ret->children.push_back(getTree(ch));
	return ret;
}
//지금까지 찾은 가장 긴 잎-잎 경로의 길이를 저장한다.
int longest;
//root를 루트로 하는 트리의 높이를 반환한다.
int height(TreeNode* root) {
	//각 자식을 루트로 하는 서브트리의 높이를 계산한다.
	vector<int> heights;
	for (int i = 0; i < root->children.size(); ++i)
		heights.push_back(height(root->children[i]));
	//만약 자식이 하나도 없다면 0을 반환한다. 
	if (heights.empty()) return 0;
	sort(heights.begin(), heights.end());//코드 간결성
	//root를 최상위 노드로 하는 경로를 고려하자.
	if (heights.size() >= 2)
		longest = max(longest, 2 + heights[heights.size() - 2] +
			heights[heights.size() - 1]);
	//트리의 높이는 서브트리 높이의 최대치에 1을 더해 계산한다.
	return heights.back() + 1;
}