#include<iostream>
#include<stdio.h>
#include<vector>
#include<stack>
#include<queue>
#include<list>
#include<string>
#include<algorithm>
#include<cassert>
#include<memory.h>
#include<cmath>
using namespace std;
//N에서 자기 자신을 찾으면서 나타나는 부분 일치를 이용해
//p[]를 계산한다.
//p[i]: N[...i]의 접미사도 되고 접두사도 되는 문자열의 최대 길이
vector<int> getPartialMatch(const string& N) {
	int m = N.size();
	vector<int> pi(m, 0);
	//KMP로 자기 자신을 찾는다.
	//N을 N에서 찾는다. begin=0 이면 자기 자신을 찾으므로 1부터 시작한다.
	int begin = 1, matched = 0;
	//begin+matched는 절대 줄어들지 않는다.
	//비교할 문자가 N의 끝에 도달할 때까지 찾으면서 부분 일치를 모두 기록한다.
	while (begin + matched < m) {
		if (N[begin + matched] == N[matched]) {
			++matched;
			pi[begin + matched] = matched;
		}
		else {
			//begin=begin+match, begin'가 없을때
			if (matched == 0) ++begin;
			else {
				//begin'로 이동시킨다.
				begin += matched - pi[matched - 1];
				matched = pi[matched - 1];
			}
		}
	}
	return pi;
}
//'짚더미'H(haystack)의 부분 문자열로
//'바늘'N(needle)이 출현하는 시작위치들을 모두 반환한다.
vector<int> kmpSearch(const string& H, const string& N) {
	int n = H.size(), m = N.size();
	vector<int> ret;
	//p[i]=N[...i]의 접미사도 되고 접두사도 되는 문자열의 최대 길이
	vector<int> pi = getPartialMatch(N);
	int begin = 0, matched = 0;
	while (begin <= n - m) {//H문자열을 초과하면 안되니까
		//begin+matched는 절대 줄어들지 않는다.
		//바늘의 해당 글자와 같다면
		if (matched < m && H[begin + matched] == N[matched]) {
			++matched;
			//m글자가 모두 일치했다면 답에 추가한다.
			if (matched == m) ret.push_back(begin);
		}
		else {
			if (matched == 0)
				++begin;
			else {
				begin += matched - pi[matched - 1];
				//begin을 옮긴 후에도 pi[matced-1]만큼은 또 일치한다.
				matched = pi[matched - 1];
			}
		}
	}
	return ret;
}
int main(void) {
	
}