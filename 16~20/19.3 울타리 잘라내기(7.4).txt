#include<iostream>
#include<stdio.h>
#include<vector>
#include<stack>
#include<queue>
#include<list>
#include<string>
#include<algorithm>
#include<cassert>
#include<memory.h>
#include<cmath>
using namespace std;
//각 판자의 높이를 저장하는 배열
vector<int> h;
//최대사각형,left,right의 개념을 사용한다.
//스택을 사용한 O(n) 해법
int solveStack() {
	//남아 있는 판자들의 위치를 저장한다.
	stack<int> remaining;
	h.push_back(0);//마지막의 가상의 판자
	int ret = 0;
	//while은 h.size까지 총 n번 실행된다.o(n)+o(n)
	for (int i = 0; i < h.size(); ++i) {
		//남아있는 판자들 중 h[i]보다 높다면
		//이 판자들의 right는 i이다.
		while (!remaining.empty() && h[remaining.top()] >= h[i]) {
			int j = remaining.top();
			remaining.pop();
			int width = -1;
			//j번째 판자 왼쪽에 판자가 하나도 안 남아 있는 경우 left[j]=-1
			//아닌 경우 left[j]=남아 있는 판자 중 가장 오른쪽에 있는 판자의 번호가 된다.
			if (remaining.empty())
				width = i;
			else
				width = (i - remaining.top() - 1);
			ret = max(ret, h[j] * width);
		}
		remaining.push(i);
	}
	return ret;
}