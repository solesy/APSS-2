#include<iostream>
#include<stdio.h>
#include<vector>
#include<stack>
#include<queue>
#include<list>
#include<string>
#include<algorithm>
#include<cassert>
#include<memory.h>
#include<cmath>
#include <time.h>
using namespace std;
//각 접미사들의 첫 t글자를 기준으로한 그룹번호가 주어질 때,
//주어진 두 접미사를 첫 2*t글자를 기준으로 비교한다. 
//group[]은 길이가 0인 접미사도 포함한다.
struct Comparator {
	const vector<int>& group;
	int t;
	Comparator(const vector<int>& _group, int _t) : group(_group), t(_t) {}
	//객체를 함수처럼 사용하게 해주는 () 연산자 오버로딩......
	bool operator()(int a, int b) {
		//S[a...] S[b...]의 첫 t글자가 다르면 주어진 그룹을 이용해 비교한다.
		if (group[a] != group[b]) return group[a] < group[b];
		//S[a+t...] S[b+t...]의 첫 t글자를 비교한다.
		//첫 t 다음에 다음글자부터 비교한다.
		return group[a + t] < group[b + t];
	}
};
//S의 접미사 배열을 계산한다.
vector<int> getSuffixArray(const string& S) {
	int n = S.size();
	//group[i]: 접미사들을 첫 t글자 기준으로 정렬했을 때, S[i...]가 들어가는 그룹번호.
	//t=1일때는 정렬할 것 없이 S[i...]의 첫글자로 그룹번호를 정해줘도 같은 효과가 있다.
	int t = 1;
	vector<int>group(n + 1);
	for (int i = 0; i < n; ++i) group[i] = S[i];//int = char
	group[n] = -1;
	//결과적으로 접미사 배열이 반환될 값. 이 배열을 lg(n)번 정렬한다.
	vector<int> perm(n);
	for (int i = 0; i < n; ++i) perm[i] = i;
	while (t < n) {
		//group[]은 첫 t글자를 기준으로 계산해 뒀다.
		//첫 2t글자를 기준으로 perm을 재정렬한다.
		//t< n < 2t
		Comparator compareUsing2T(group, t);
		//perm의 그룹순서에 따라 정렬.2t
		sort(perm.begin(), perm.end(), compareUsing2T);
		//2t글자가 n을 넘는다면 접미사 배열 완성!
		t *= 2;
		if (t >= n) break;
		//2t글자를 기준으로 한 그룹 정보를 정렬된 perm을 참고해서 만든다.
		vector<int> newGroup(n + 1);
		newGroup[n] = -1;
		//표에서 첫 접미사는 항상 0번그룹
		newGroup[perm[0]] = 0;
		//perm이 정렬된거에 따라 group 번호를 붙이는 것이다 ...!
		for (int i = 1; i < n; ++i)
			if (compareUsing2T(perm[i - 1], perm[i]))//정렬된 perm에서 perm[i-1]의 그룹이 perm[i]의 그룹보다 작으면
				newGroup[perm[i]] = newGroup[perm[i - 1]] + 1;//그 정보대로 perm[i]의 그룹을 앞의 그룹 + 1 한다.
			else
				newGroup[perm[i]] = newGroup[perm[i - 1]];
		group = newGroup;
	}
	return perm;
}
int main(void) {
	
}